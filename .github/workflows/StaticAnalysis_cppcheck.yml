name: StaticAnalysis cppcheck
on: { push: { paths-ignore: [ 'README.md', '**/requirements.txt' ] }, workflow_dispatch }
# Configuration
env:
  strPlatform: x86 # or x64
  strConfiguration: Debug # or Release
  strNameCppcheckSetupFile: cppcheck-2.11-x64-Setup.msi
  strGhTagCppcheckSetupFile: 2.11 # from https://github.com/danmar/cppcheck/releases/tag/
jobs:
  cppcheck:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set values (windows-latest)
        run: | 
          echo "dirSetupCppcheck=${env:Programfiles}\cppcheck" >> $env:GITHUB_ENV

      - name: Cache tool cppcheck
        uses: actions/cache@v3
        with:
          path: ${{env.dirSetupCppcheck}}
          key: cache-key-tool-cppcheck-${{env.strNameCppcheckSetupFile}}
        id: cache-tool-cppcheck
      - name: Download tool cppcheck
        if: steps.cache-tool-cppcheck.outputs.cache-hit != 'true'
        uses: robinraju/release-downloader@v1.8
        with:
          repository: danmar/cppcheck
          fileName: ${{env.strNameCppcheckSetupFile}}
          tag: ${{env.strGhTagCppcheckSetupFile}}
      - name: Install tool cppcheck
        if: steps.cache-tool-cppcheck.outputs.cache-hit != 'true'
        run: |
          $arglist = "/i ""${{github.workspace}}\${{env.strNameCppcheckSetupFile}}"" INSTALLDIR=""${{env.dirSetupCppcheck}}"" TARGETDIR=""${{env.dirSetupCppcheck}}"" ALLUSERS=2 MSIINSTALLPERUSER=1 /quiet /norestart /log ""${{runner.temp}}\${{env.strNameCppcheckSetupFile}}.log"" "
          
          $uWait_seconds = 60;
          $ps = new-object System.Diagnostics.Process; $ps.StartInfo.UseShellExecute = $false; $ps.StartInfo.WorkingDirectory = Get-Location;
          $ps.StartInfo.Filename = "msiexec"
          $ps.StartInfo.Arguments = $arglist
          $uWait_milliseconds = $uWait_seconds *1000;
          $ps.start( ); $ps.WaitForExit( $uWait_milliseconds );
          
          type "${{runner.temp}}\${{env.strNameCppcheckSetupFile}}.log"

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.1
      - name: Run tool cppcheck
        continue-on-error: true
        run: | 
          "env:INCLUDE: '$env:INCLUDE'";
          if ( !$env:INCLUDE ) { 
              # $installationPath="C:\Program Files (x86)\Microsoft Visual Studio\2019\Community";
              $installationPath=vswhere.exe -prerelease -latest -property installationPath
              "installationPath: '$installationPath'";
              & "${env:COMSPEC}" /s /c """$installationPath\Common7\Tools\vsdevcmd.bat"" -no_logo && set" | foreach-object { 
                  if ( $_.StartsWith("INCLUDE=") ) { $env:INCLUDE=$_.Replace( 'INCLUDE=', '' ); }
              }
          }
          "env:INCLUDE: '$env:INCLUDE'";
          $include  = ' -I "' + ( $env:INCLUDE.Split( ';' ) -join '" -I "' ) + '"';
          $include; #
          $include += ' -I "resource"'
          $include += ' -I "src"'
          $include += ' -I "ThirdParty\SynCOMAPIv1_0\Include"'
          $defines  = ' -DDECLSPEC_IMPORT=__declspec(import)'
          $defines += ' -D_X86_=1'
          $defines += ' -D_M_HYBRID_X86_ARM64=1'
          $suppress = ' --suppress=syntaxError:"*\WTypesbase.h":359'
          $common = '--std=c++14 --platform=win32A --library=microsoft_sal --library=windows --enable=all --xml -q';
          $cppcheck_exe = "${{env.dirSetupCppcheck}}\cppcheck.exe"
          $cppcheck_args = $common + $include + $defines + $suppress + ' ' + 'src';
          $cppcheck_args; #
          Start-Process -Wait -NoNewWindow $cppcheck_exe -ArgumentList $cppcheck_args -RedirectStandardError ${{runner.temp}}\cppcheck.xml
          
          [xml]$oSystem_Xml_XmlDocument = Get-Content ${{runner.temp}}\cppcheck.xml
          $uCountError = $oSystem_Xml_XmlDocument.GetElementsByTagName( 'results' ).GetElementsByTagName( 'errors' ).GetElementsByTagName( 'error' ).Count;
          "uCountError: '$uCountError'"; #
          [xml]$oSystem_Xml_XmlDocument = Get-Content ${{runner.temp}}\cppcheck.xml
          $child = $oSystem_Xml_XmlDocument.CreateElement( 'Arguments' )
          $child.InnerText = $cppcheck_args;
          $oSystem_Xml_XmlDocument.DocumentElement.AppendChild( $child );
          $oSystem_Xml_XmlDocument.Save( "${{runner.temp}}\cppcheck.xml" )
          type "${{runner.temp}}\cppcheck.xml" #
          echo "cppcheck_uCountError=$uCountError" >> $env:GITHUB_ENV

      - name: Generate *.svg file for badge cppcheck if success
        if: env.cppcheck_uCountError == '0'
        uses: emibcn/badge-action@v2.0.2
        with:
          label: cppcheck
          status: passing
          color: green
          path: cppcheck.svg
      - name: Generate *.svg file for badge cppcheck if failure
        if: env.cppcheck_uCountError > 0 || env.cppcheck_uCountError == ''
        uses: emibcn/badge-action@v2.0.2
        with:
          label: cppcheck
          status: failing
          color: red
          path: StaticAnalysis_cppcheck.svg
      - name: Put *.svg file to Gists for badge cppcheck
        uses: exuanbo/actions-deploy-gist@v1
        with:
          token: ${{ secrets.ACCESS_TO_GIST }}
          gist_id: 2af621bdd237231125e907ea81b1f8a8
          file_path: StaticAnalysis_cppcheck.svg
