name: Andvanced collect source code tests coverage using OpenCppCoverage (Debug-x86)
on: [push,workflow_dispatch]
# Configuration
env:
  strPlatform: x86 # or x64
  strConfiguration: Debug # or Release
  module0: GTest1.exe
  module1: GTestDefWindowProc.exe
  module2: GTestEmptyWorkingSet.exe
  module3: GTestMem.exe
  strNameOccSetupFile: OpenCppCoverageSetup-x86-0.9.9.0.exe
  strGhTagOccSetupFile: release-0.9.9.0 # from https://github.com/OpenCppCoverage/OpenCppCoverage/tags
  relSetupOcc: Occ
  strOccExecutable: OpenCppCoverage.exe
  relHtmlReport: HtmlReportOcc
  strCoberturaReport: CoberturaReportOcc.xml
  relGtestOutput: GtestOutput
jobs:
  collect-tests-code-coverage:
    runs-on: windows-latest
    permissions:
      actions: read # for "dawidd6/action-download-artifact@v2"
      contents: read # for "actions/checkout@v3" when GITHUB_TOKEN
    steps:
      - uses: actions/checkout@v3

      - name: Download artifact
        uses: dawidd6/action-download-artifact@v2
        env: # build from *.sln, all tests
           dirTestExecutables: ${{github.workspace}}\qa\UnitTest\bin\${{env.strPlatform}}\${{env.strConfiguration}}
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: build-tests-gtest-debug-x86.yml
          name: artifact-build-tests-gtest-${{env.strPlatform}}-${{env.strConfiguration}}
          path: ${{env.dirTestExecutables}}
          search_artifacts: true

      - name: Download tool
        uses: robinraju/release-downloader@v1.8
        with:
          repository: "OpenCppCoverage/OpenCppCoverage"
          fileName: ${{env.strNameOccSetupFile}}
          tag: ${{env.strGhTagOccSetupFile}}

      - name: Install tool
        run: |
          $args="/VERYSILENT /SUPPRESSMSGBOXES /DIR=${env:RUNNER_TEMP}\${env:relSetupOcc} /LOG=${env:RUNNER_TEMP}\${env:strNameOccSetupFile}.log"
          Start-Process "${env:strNameOccSetupFile}" -ArgumentList $args -Wait 

      - name: Run tool
        env: # build from *.sln, all tests
           dirTestExecutables: ${{github.workspace}}\qa\UnitTest\bin\${{env.strPlatform}}\${{env.strConfiguration}}
        # TODO: multiline excluded_sources
        # TODO: array call for env:module0
        run: | # double launching because windows system hooks from AppCompat conflicts with gmock-win32 hooks
          .${env:dirTestExecutables}\${env:module0} --help > nul 2>&1
          .${env:dirTestExecutables}\${env:module1} --help > nul 2>&1
          .${env:dirTestExecutables}\${env:module2} --help > nul 2>&1
          .${env:dirTestExecutables}\${env:module3} --help > nul 2>&1
          
          $common_args="-q --working_dir src"
          $modules="--modules ${env:dirTestExecutables}"
          $excluded_sources='--excluded_sources "src\Main.h" --excluded_sources "src\Legacy" --excluded_sources "qa\UnitTest" --excluded_sources "D:\a\_work" --excluded_sources "C:\Program Files"'
          $excluded_line_regex='--excluded_line_regex .*@NOCOVERAGE.*'
          $occ_exe="${env:RUNNER_TEMP}\${env:relSetupOcc}\${env:strOccExecutable}"
          
          $program_to_run="${env:dirTestExecutables}\${env:module1} --gtest_brief=1 --gtest_output=xml:${env:RUNNER_TEMP}/${env:relGtestOutput}/${env:module1}.xml"
          $export_type="--export_type binary:${env:RUNNER_TEMP}\${env:module1}.cov"
          $args="$common_args $modules $excluded_sources $excluded_line_regex $export_type -- $program_to_run"
          $ps = new-object System.Diagnostics.Process
          $ps.StartInfo.Filename = $occ_exe
          $ps.StartInfo.Arguments = $args
          $ps.StartInfo.UseShellExecute = $false; $ps.start(); $ps.WaitForExit()
          
          $program_to_run="${env:dirTestExecutables}\${env:module2} --gtest_brief=1 --gtest_output=xml:${env:RUNNER_TEMP}/${env:relGtestOutput}/${env:module2}.xml"
          $export_type="--export_type binary:${env:RUNNER_TEMP}\${env:module2}.cov"
          $args="$common_args $modules $excluded_sources $excluded_line_regex $export_type -- $program_to_run"
          $ps = new-object System.Diagnostics.Process
          $ps.StartInfo.Filename = $occ_exe
          $ps.StartInfo.Arguments = $args
          $ps.StartInfo.UseShellExecute = $false; $ps.start(); $ps.WaitForExit()
          
          $program_to_run="${env:dirTestExecutables}\${env:module3} --gtest_brief=1 --gtest_output=xml:${env:RUNNER_TEMP}/${env:relGtestOutput}/${env:module3}.xml"
          $export_type="--export_type binary:${env:RUNNER_TEMP}\${env:module3}.cov"
          $args="$common_args $modules $excluded_sources $excluded_line_regex $export_type -- $program_to_run"
          $ps = new-object System.Diagnostics.Process
          $ps.StartInfo.Filename = $occ_exe
          $ps.StartInfo.Arguments = $args
          $ps.StartInfo.UseShellExecute = $false; $ps.start(); $ps.WaitForExit()
          
          $program_to_run="${env:dirTestExecutables}\${env:module0} --gtest_brief=1 --gtest_output=xml:${env:RUNNER_TEMP}/${env:relGtestOutput}/${env:module0}.xml"
          $export_type="--export_type html:${env:RUNNER_TEMP}\${env:relHtmlReport} --export_type cobertura:${env:RUNNER_TEMP}\${env:strCoberturaReport}"
          $input_coverage="--input_coverage ${env:RUNNER_TEMP}\${env:module1}.cov --input_coverage ${env:RUNNER_TEMP}\${env:module2}.cov --input_coverage ${env:RUNNER_TEMP}\${env:module3}.cov"
          $args="$common_args $modules $excluded_sources $excluded_line_regex $input_coverage $export_type -- $program_to_run"
          $ps = new-object System.Diagnostics.Process
          $ps.StartInfo.Filename = $occ_exe
          $ps.StartInfo.Arguments = $args
          $ps.StartInfo.UseShellExecute = $false; $ps.start(); $ps.WaitForExit()
          
          [xml]$oSystem_Xml_XmlDocument = Get-Content ${env:RUNNER_TEMP}\${env:strCoberturaReport};
          $oSystem_Xml_XmlElement = $oSystem_Xml_XmlDocument.GetElementsByTagName( 'coverage' ).Item( 0 );
          $uLinesCovered = $oSystem_Xml_XmlElement.GetAttribute( 'lines-covered' );
          $uLinesValid = $oSystem_Xml_XmlElement.GetAttribute( 'lines-valid' );
          $dCoveredPercent = ( 100 * ( $uLinesCovered / $uLinesValid ) );
          $strCoveredPercent = [math]::Round( $dCoveredPercent, 2 );
          $strCoveredPercent

      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          cache: 'pip'
      - name: Install merger
        run: pip install junitparser
      - name: Merge reports
        run: junitparser merge --suite-name AllTests --glob "${env:RUNNER_TEMP}/${env:relGtestOutput}/*.xml" "combined.xml"
      - name: Install gtest converter
        run: git clone https://github.com/Alexovsky5/gtest_report
      - name: Convert xml to html
        working-directory: ./gtest_report # directory html_resources must be in current dir
        run: |
          py scripts\genHtmlReportFromGtest.py "out/GoogleTestCombinedOutput.html" "../combined.xml"
          mv -v "out" ${env:RUNNER_TEMP}\GoogleTestCombinedOutput

      - uses: actions/upload-artifact@v3
        with:
          name: artifact-coverage-tests-OpenCppCoverage-${{env.strPlatform}}-${{env.strConfiguration}}
          path: |
            ${{runner.temp}}\${{env.relHtmlReport}}
            ${{runner.temp}}\GoogleTestCombinedOutput
