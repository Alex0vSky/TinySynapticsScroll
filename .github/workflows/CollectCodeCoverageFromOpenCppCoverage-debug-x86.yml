name: Run tests, then collect result and coverage
on: [ workflow_dispatch ]
# Configuration
env:
  strPlatform: x86 # or x64
  strConfiguration: Debug # or Release
  module0: GTest1.exe
  module1: GTestDefWindowProc.exe
  module2: GTestEmptyWorkingSet.exe
  module3: GTestMem.exe
  strNameOccSetupFile: OpenCppCoverageSetup-x86-0.9.9.0.exe
  strGhTagOccSetupFile: release-0.9.9.0 # from https://github.com/OpenCppCoverage/OpenCppCoverage/tags
  strOccExecutable: OpenCppCoverage.exe
  relHtmlReport: HtmlReportOcc
  strCoberturaReport: CoberturaReportOcc.xml
  relGtestOutput: GtestOutput
jobs:
  collect-tests-code-coverage:
    runs-on: windows-latest
    permissions:
      actions: read # for "dawidd6/action-download-artifact@v2"
      contents: read # for "actions/checkout@v3" when GITHUB_TOKEN
    steps:
      - uses: actions/checkout@v3

      - name: Set values (windows-latest)
        run: | # build from *.sln, all tests
          echo "dirTestExecutables=${{github.workspace}}\qa\UnitTest\bin\${{env.strPlatform}}\${{env.strConfiguration}}" >> $env:GITHUB_ENV
          echo "dirSetupOcc=${env:Programfiles}\Occ" >> $env:GITHUB_ENV

      - name: Cache tool
        uses: actions/cache@v3
        with:
          path: ${{env.dirSetupOcc}}
          key: cache-key-tool-occ-${{env.strNameOccSetupFile}}
        id: cache-tool-occ

      - name: Download tool
        if: steps.cache-tool-occ.outputs.cache-hit != 'true'
        uses: robinraju/release-downloader@v1.8
        with:
          repository: OpenCppCoverage/OpenCppCoverage
          fileName: ${{env.strNameOccSetupFile}}
          tag: ${{env.strGhTagOccSetupFile}}
      - name: Install tool
        if: steps.cache-tool-occ.outputs.cache-hit != 'true'
        run: |
          $arglist="/VERYSILENT /SUPPRESSMSGBOXES /DIR=""${env:dirSetupOcc}"" /LOG=""${env:RUNNER_TEMP}\${env:strNameOccSetupFile}.log"""
          Start-Process "${env:strNameOccSetupFile}" -ArgumentList $arglist -Wait 
          #type "${env:RUNNER_TEMP}\${env:strNameOccSetupFile}.log"

      - name: Download artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: build-tests-gtest-debug-x86.yml
          name: artifact-build-tests-gtest-${{env.strPlatform}}-${{env.strConfiguration}}
          path: ${{env.dirTestExecutables}}
          search_artifacts: true

      - name: Run tool
        continue-on-error: true
        run: | # double launching because windows system hooks from AppCompat conflicts with gmock-win32 hooks
          @( 
          	  "${env:module0}"
            , "${env:module1}"
            , "${env:module2}"
            , "${env:module3}"
          ).ForEach{ Start-Process "${env:dirTestExecutables}\$_" -ArgumentList '--gtest_repeat=0' -NoNewWindow; } 
          
          $common_args='-q --working_dir "src"'
          $modules="--modules ${env:dirTestExecutables}"
          $sep = ' --excluded_sources '; $excluded_sources = $sep + ( '"{0}"' -f ( @( 
          'src\Main.h'
            , 'src\Legacy'
            , 'qa\UnitTest'
            , 'D:\a\_work'
            , 'C:\Program Files'
          ) -join '"'+$sep+'"') );
          $excluded_line_regex='--excluded_line_regex .*@NOCOVERAGE.*'
          Function runnerOcc_ { Param( 
              [ValidateNotNullOrEmpty()]$arg_program=$(throw "Is mandatory, please provide a value /questions/9506056/")
              , [ValidateNotNullOrEmpty()]$arg_export_type=$(throw "Is mandatory, please provide a value /questions/9506056/")
              , [ValidateNotNullOrEmpty()]$arg_input_coverage=''
          )
            $program_to_run="${env:dirTestExecutables}\$arg_program --gtest_brief=1 --gtest_output=xml:${env:RUNNER_TEMP}/${env:relGtestOutput}/$arg_program.xml"
            $ps = new-object System.Diagnostics.Process; $ps.StartInfo.UseShellExecute = $false; $ps.StartInfo.WorkingDirectory = Get-Location;
            $ps.StartInfo.Filename = "${env:dirSetupOcc}\${env:strOccExecutable}"
            $ps.StartInfo.Arguments = "$common_args $modules $excluded_sources $excluded_line_regex $arg_input_coverage $arg_export_type -- $program_to_run"
            $ps.start( ); $ps.WaitForExit( )
            #"ps.StartInfo.Arguments: '$($ps.StartInfo.Arguments)'";
          }
          
          $export_type="--export_type binary:${env:RUNNER_TEMP}\${env:module1}.cov"
          runnerOcc_ $env:module1 $export_type
          $export_type="--export_type binary:${env:RUNNER_TEMP}\${env:module2}.cov"
          runnerOcc_ $env:module2 $export_type
          $export_type="--export_type binary:${env:RUNNER_TEMP}\${env:module3}.cov"
          runnerOcc_ $env:module3 $export_type              
          $export_type="--export_type html:${env:RUNNER_TEMP}\${env:relHtmlReport} --export_type cobertura:${env:RUNNER_TEMP}\${env:strCoberturaReport}"
          $sep = " --input_coverage ${env:RUNNER_TEMP}\"; $input_coverage = $sep + ( @(
            "${env:module1}.cov"
            , "${env:module2}.cov"
            , "${env:module3}.cov"
          ) -join $sep );
          runnerOcc_ $env:module0 $export_type $input_coverage
          
          [xml]$oSystem_Xml_XmlDocument = Get-Content ${env:RUNNER_TEMP}\${env:strCoberturaReport};
          $oSystem_Xml_XmlElement = $oSystem_Xml_XmlDocument.GetElementsByTagName( 'coverage' ).Item( 0 );
          $uLinesCovered = $oSystem_Xml_XmlElement.GetAttribute( 'lines-covered' );
          $uLinesValid = $oSystem_Xml_XmlElement.GetAttribute( 'lines-valid' );
          $dCoveredPercent = ( 100 * ( $uLinesCovered / $uLinesValid ) );
          $strCoveredPercent = [math]::Round( $dCoveredPercent, 2 );
          "CoveredPercent: $strCoveredPercent%"

      - uses: actions/setup-python@v4
        with:
          python-version: 3.x
          cache: pip
      - name: Install xml merger
        run: pip install junitparser
      - name: Merge xml reports
        run: junitparser merge --suite-name AllTests --glob "${env:RUNNER_TEMP}/${env:relGtestOutput}/*.xml" "${env:strPlatform}-${env:strConfiguration}.xml"
      - name: Install gtest xml to html converter
        run: git clone https://github.com/Alexovsky5/gtest_report
      - name: Convert xml to html
        working-directory: ./gtest_report # directory html_resources must be in current dir
        run: |
          py scripts\genHtmlReportFromGtest.py "out/GoogleTestCombinedOutput.html" "../${env:strPlatform}-${env:strConfiguration}.xml"
          mv -v "out" ${env:RUNNER_TEMP}\GoogleTestCombinedOutput

      - uses: actions/upload-artifact@v3
        with:
          name: artifact-coverage-tests-OpenCppCoverage-${{env.strPlatform}}-${{env.strConfiguration}}
          path: |
            ${{runner.temp}}\${{env.relHtmlReport}}
            ${{runner.temp}}\GoogleTestCombinedOutput
