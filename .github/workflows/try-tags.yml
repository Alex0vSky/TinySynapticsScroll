name: try tags
on: { push: { paths-ignore: [ 'README.md', '**/requirements.txt' ] }, workflow_dispatch }
# Configuration
env:
  strExe: TinySynapticsScroll
  uriGistId: 5b3e4b4e30daee437b2ac5689c92fa77
jobs:
  try-tags:
    runs-on: windows-latest
    permissions:
      actions: read # for "dawidd6/action-download-artifact@v2"
      contents: write # read for "actions/checkout@v3" when GITHUB_TOKEN, write for put in release
    steps:
      - uses: actions/checkout@v3

      - name: Set values (windows-latest)
        run: | # build from *.sln
          $dirBin='${{github.workspace}}\bin';
          $dirExecutables_x86="$dirBin\bin\x86\Release";
          echo "dirExecutables_x86=$dirExecutables_x86" >> $env:GITHUB_ENV
          $dirExecutables_x64="$dirBin\bin\x64\Release";
          echo "dirExecutables_x64=$dirExecutables_x64" >> $env:GITHUB_ENV
          echo "dirBin=$dirBin" >> $env:GITHUB_ENV
          $uriVersion='gist.githubusercontent.com/${{ github.repository_owner }}/${{ env.uriGistId }}/raw'
          echo "uriVersion=$uriVersion" >> $env:GITHUB_ENV
      # TODO: from gist
      - name: Get version values
        run: | 
          $strVersionMajor=$(curl.exe https://${{ env.uriVersion }}/strVersionMajor.txt);
          $strVersionPatch=$(curl.exe https://${{ env.uriVersion }}/strVersionPatch.txt);
          echo "strVersionMajor=$strVersionMajor" >> $env:GITHUB_ENV
          echo "strVersionMinor=0" >> $env:GITHUB_ENV
          echo "strVersionPatch=$strVersionPatch" >> $env:GITHUB_ENV
          $strVersionBuild=( [int]${{ env.strPatchVersionBase }} + [int]${{ github.run_number }} + ( [int]${{ github.run_attempt }} - 1 ) )
          echo "strVersionBuild=$strVersionBuild" >> $env:GITHUB_ENV

      - name: Set version
        run: | 
          $ffnVersion='src\Version.h'
          (Get-Content $ffnVersion).replace('#define A0S_VERSION_MAJOR 0', '#define A0S_VERSION_MAJOR ${{ env.strVersionMajor }}') | 
            Set-Content $ffnVersion                                                                                           
          (Get-Content $ffnVersion).replace('#define A0S_VERSION_MINOR 0', '#define A0S_VERSION_MINOR ${{ env.strVersionMinor }}') |
            Set-Content $ffnVersion                                                                                           
          (Get-Content $ffnVersion).replace('#define A0S_VERSION_PATCH 0', '#define A0S_VERSION_PATCH ${{ env.strVersionPatch }}') | 
            Set-Content $ffnVersion                                                                                           
          (Get-Content $ffnVersion).replace('#define A0S_VERSION_BUILD 0', '#define A0S_VERSION_BUILD ${{ env.strVersionBuild }}') | 
            Set-Content $ffnVersion
          type $ffnVersion; #
          $strTag='${{ env.strVersionMajor }}.${{ env.strVersionMinor }}';
          echo "strTag=v$strTag" >> $env:GITHUB_ENV
          $strSemver="$strTag.${{ env.strVersionPatch }}.${{ env.strVersionBuild }}";
          echo "strSemver=$strSemver" >> $env:GITHUB_ENV

      - name: Download artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: build-release-all.yml
          name: artifact-build-release-all
          path: ${{env.dirBin}}
          search_artifacts: true

      - name: Renaming to versioning names
        run: | 
          mv -v ${{env.dirExecutables_x86}}\${{env.strExe}}.exe ${{runner.temp}}\${{env.strExe}}-${{ env.strSemver }}-x86.exe
          mv -v ${{env.dirExecutables_x64}}\${{env.strExe}}.exe ${{runner.temp}}\${{env.strExe}}-${{ env.strSemver }}-x64.exe
      - name: Replace '\\' for softprops/action-gh-release
        run: | 
          $strGlob="${{runner.temp}}/${{env.strExe}}-${{ env.strSemver }}-*.exe";
          $strGlob = $strGlob -replace '\\','/';
          echo "strGlob=$strGlob" >> $env:GITHUB_ENV

      # Warning: only this '/' slashes!
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.strTag }}
          fail_on_unmatched_files: true
          body: First release
          files: ${{ env.strGlob }}
